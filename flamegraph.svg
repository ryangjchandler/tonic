<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180" total_samples="1471"><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.07%)</title><rect x="0.0000%" y="229" width="0.0680%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.48%)</title><rect x="0.0680%" y="149" width="0.4759%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="7"/><text x="0.3180%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.14%)</title><rect x="0.5438%" y="149" width="0.1360%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="2"/><text x="0.7938%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.75%)</title><rect x="0.6798%" y="149" width="0.7478%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="11"/><text x="0.9298%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.54%)</title><rect x="1.4276%" y="149" width="0.5438%" height="15" fill="rgb(208,68,35)" fg:x="21" fg:w="8"/><text x="1.6776%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.20%)</title><rect x="1.9714%" y="149" width="0.2039%" height="15" fill="rgb(232,128,0)" fg:x="29" fg:w="3"/><text x="2.2214%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.20%)</title><rect x="2.1754%" y="149" width="0.2039%" height="15" fill="rgb(207,160,47)" fg:x="32" fg:w="3"/><text x="2.4254%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (23 samples, 1.56%)</title><rect x="2.3793%" y="149" width="1.5636%" height="15" fill="rgb(228,23,34)" fg:x="35" fg:w="23"/><text x="2.6293%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.61%)</title><rect x="3.9429%" y="149" width="0.6118%" height="15" fill="rgb(218,30,26)" fg:x="58" fg:w="9"/><text x="4.1929%" y="159.50"></text></g><g><title>tonic`&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.41%)</title><rect x="4.5547%" y="149" width="0.4079%" height="15" fill="rgb(220,122,19)" fg:x="67" fg:w="6"/><text x="4.8047%" y="159.50"></text></g><g><title>tonic`&lt;tonic::value::Value as core::cmp::PartialEq&gt;::eq (8 samples, 0.54%)</title><rect x="4.9626%" y="149" width="0.5438%" height="15" fill="rgb(250,228,42)" fg:x="73" fg:w="8"/><text x="5.2126%" y="159.50"></text></g><g><title>tonic`DYLD-STUB$$free (8 samples, 0.54%)</title><rect x="5.5065%" y="149" width="0.5438%" height="15" fill="rgb(240,193,28)" fg:x="81" fg:w="8"/><text x="5.7565%" y="159.50"></text></g><g><title>tonic`DYLD-STUB$$memcmp (4 samples, 0.27%)</title><rect x="6.0503%" y="149" width="0.2719%" height="15" fill="rgb(216,20,37)" fg:x="89" fg:w="4"/><text x="6.3003%" y="159.50"></text></g><g><title>tonic`__rdl_alloc (1 samples, 0.07%)</title><rect x="6.3222%" y="149" width="0.0680%" height="15" fill="rgb(206,188,39)" fg:x="93" fg:w="1"/><text x="6.5722%" y="159.50"></text></g><g><title>tonic`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (10 samples, 0.68%)</title><rect x="6.3902%" y="149" width="0.6798%" height="15" fill="rgb(217,207,13)" fg:x="94" fg:w="10"/><text x="6.6402%" y="159.50"></text></g><g><title>tonic`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.14%)</title><rect x="7.0700%" y="149" width="0.1360%" height="15" fill="rgb(231,73,38)" fg:x="104" fg:w="2"/><text x="7.3200%" y="159.50"></text></g><g><title>tonic`hashbrown::map::make_hash (1 samples, 0.07%)</title><rect x="7.2060%" y="149" width="0.0680%" height="15" fill="rgb(225,20,46)" fg:x="106" fg:w="1"/><text x="7.4560%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.54%)</title><rect x="30.5914%" y="85" width="0.5438%" height="15" fill="rgb(210,31,41)" fg:x="450" fg:w="8"/><text x="30.8414%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (45 samples, 3.06%)</title><rect x="29.5717%" y="117" width="3.0591%" height="15" fill="rgb(221,200,47)" fg:x="435" fg:w="45"/><text x="29.8217%" y="127.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (40 samples, 2.72%)</title><rect x="29.9116%" y="101" width="2.7192%" height="15" fill="rgb(226,26,5)" fg:x="440" fg:w="40"/><text x="30.1616%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 1.50%)</title><rect x="31.1353%" y="85" width="1.4956%" height="15" fill="rgb(249,33,26)" fg:x="458" fg:w="22"/><text x="31.3853%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.14%)</title><rect x="32.4949%" y="69" width="0.1360%" height="15" fill="rgb(235,183,28)" fg:x="478" fg:w="2"/><text x="32.7449%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (62 samples, 4.21%)</title><rect x="28.4840%" y="133" width="4.2148%" height="15" fill="rgb(221,5,38)" fg:x="419" fg:w="62"/><text x="28.7340%" y="143.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.07%)</title><rect x="32.6309%" y="117" width="0.0680%" height="15" fill="rgb(247,18,42)" fg:x="480" fg:w="1"/><text x="32.8809%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.14%)</title><rect x="32.6988%" y="133" width="0.1360%" height="15" fill="rgb(241,131,45)" fg:x="481" fg:w="2"/><text x="32.9488%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.07%)</title><rect x="32.8348%" y="133" width="0.0680%" height="15" fill="rgb(249,31,29)" fg:x="483" fg:w="1"/><text x="33.0848%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (75 samples, 5.10%)</title><rect x="37.6615%" y="117" width="5.0986%" height="15" fill="rgb(225,111,53)" fg:x="554" fg:w="75"/><text x="37.9115%" y="127.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_size (67 samples, 4.55%)</title><rect x="38.2053%" y="101" width="4.5547%" height="15" fill="rgb(238,160,17)" fg:x="562" fg:w="67"/><text x="38.4553%" y="111.50">libsy..</text></g><g><title>libsystem_malloc.dylib`free (147 samples, 9.99%)</title><rect x="32.9028%" y="133" width="9.9932%" height="15" fill="rgb(214,148,48)" fg:x="484" fg:w="147"/><text x="33.1528%" y="143.50">libsystem_mall..</text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.14%)</title><rect x="42.7600%" y="117" width="0.1360%" height="15" fill="rgb(232,36,49)" fg:x="629" fg:w="2"/><text x="43.0100%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 1.09%)</title><rect x="52.6852%" y="101" width="1.0877%" height="15" fill="rgb(209,103,24)" fg:x="775" fg:w="16"/><text x="52.9352%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (170 samples, 11.56%)</title><rect x="42.8960%" y="133" width="11.5568%" height="15" fill="rgb(229,88,8)" fg:x="631" fg:w="170"/><text x="43.1460%" y="143.50">libsystem_malloc...</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (102 samples, 6.93%)</title><rect x="47.5187%" y="117" width="6.9341%" height="15" fill="rgb(213,181,19)" fg:x="699" fg:w="102"/><text x="47.7687%" y="127.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.68%)</title><rect x="53.7729%" y="101" width="0.6798%" height="15" fill="rgb(254,191,54)" fg:x="791" fg:w="10"/><text x="54.0229%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (15 samples, 1.02%)</title><rect x="54.4528%" y="133" width="1.0197%" height="15" fill="rgb(241,83,37)" fg:x="801" fg:w="15"/><text x="54.7028%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.14%)</title><rect x="55.4725%" y="133" width="0.1360%" height="15" fill="rgb(233,36,39)" fg:x="816" fg:w="2"/><text x="55.7225%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.75%)</title><rect x="55.6084%" y="133" width="0.7478%" height="15" fill="rgb(226,3,54)" fg:x="818" fg:w="11"/><text x="55.8584%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.48%)</title><rect x="56.3562%" y="133" width="0.4759%" height="15" fill="rgb(245,192,40)" fg:x="829" fg:w="7"/><text x="56.6062%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (5 samples, 0.34%)</title><rect x="56.8321%" y="133" width="0.3399%" height="15" fill="rgb(238,167,29)" fg:x="836" fg:w="5"/><text x="57.0821%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 1.09%)</title><rect x="57.1720%" y="133" width="1.0877%" height="15" fill="rgb(232,182,51)" fg:x="841" fg:w="16"/><text x="57.4220%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.54%)</title><rect x="63.1543%" y="85" width="0.5438%" height="15" fill="rgb(231,60,39)" fg:x="929" fg:w="8"/><text x="63.4043%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (118 samples, 8.02%)</title><rect x="61.7947%" y="101" width="8.0218%" height="15" fill="rgb(208,69,12)" fg:x="909" fg:w="118"/><text x="62.0447%" y="111.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (90 samples, 6.12%)</title><rect x="63.6982%" y="85" width="6.1183%" height="15" fill="rgb(235,93,37)" fg:x="937" fg:w="90"/><text x="63.9482%" y="95.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (40 samples, 2.72%)</title><rect x="67.0972%" y="69" width="2.7192%" height="15" fill="rgb(213,116,39)" fg:x="987" fg:w="40"/><text x="67.3472%" y="79.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.14%)</title><rect x="69.6805%" y="53" width="0.1360%" height="15" fill="rgb(222,207,29)" fg:x="1025" fg:w="2"/><text x="69.9305%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (162 samples, 11.01%)</title><rect x="59.2794%" y="117" width="11.0129%" height="15" fill="rgb(206,96,30)" fg:x="872" fg:w="162"/><text x="59.5294%" y="127.50">libsystem_malloc..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.48%)</title><rect x="69.8165%" y="101" width="0.4759%" height="15" fill="rgb(218,138,4)" fg:x="1027" fg:w="7"/><text x="70.0665%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.68%)</title><rect x="70.2923%" y="117" width="0.6798%" height="15" fill="rgb(250,191,14)" fg:x="1034" fg:w="10"/><text x="70.5423%" y="127.50"></text></g><g><title>tonic`&lt;alloc::string::String as core::clone::Clone&gt;::clone (195 samples, 13.26%)</title><rect x="58.2597%" y="133" width="13.2563%" height="15" fill="rgb(239,60,40)" fg:x="857" fg:w="195"/><text x="58.5097%" y="143.50">tonic`&lt;alloc::string..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.54%)</title><rect x="70.9721%" y="117" width="0.5438%" height="15" fill="rgb(206,27,48)" fg:x="1044" fg:w="8"/><text x="71.2221%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 1.29%)</title><rect x="71.9918%" y="117" width="1.2916%" height="15" fill="rgb(225,35,8)" fg:x="1059" fg:w="19"/><text x="72.2418%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.48%)</title><rect x="72.8076%" y="101" width="0.4759%" height="15" fill="rgb(250,213,24)" fg:x="1071" fg:w="7"/><text x="73.0576%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.48%)</title><rect x="72.8076%" y="85" width="0.4759%" height="15" fill="rgb(247,123,22)" fg:x="1071" fg:w="7"/><text x="73.0576%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (40 samples, 2.72%)</title><rect x="73.2835%" y="117" width="2.7192%" height="15" fill="rgb(231,138,38)" fg:x="1078" fg:w="40"/><text x="73.5335%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (33 samples, 2.24%)</title><rect x="73.7593%" y="101" width="2.2434%" height="15" fill="rgb(231,145,46)" fg:x="1085" fg:w="33"/><text x="74.0093%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.48%)</title><rect x="75.5269%" y="85" width="0.4759%" height="15" fill="rgb(251,118,11)" fg:x="1111" fg:w="7"/><text x="75.7769%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (6 samples, 0.41%)</title><rect x="76.0027%" y="117" width="0.4079%" height="15" fill="rgb(217,147,25)" fg:x="1118" fg:w="6"/><text x="76.2527%" y="127.50"></text></g><g><title>tonic`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (75 samples, 5.10%)</title><rect x="71.5160%" y="133" width="5.0986%" height="15" fill="rgb(247,81,37)" fg:x="1052" fg:w="75"/><text x="71.7660%" y="143.50">tonic`..</text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.20%)</title><rect x="76.4106%" y="117" width="0.2039%" height="15" fill="rgb(209,12,38)" fg:x="1124" fg:w="3"/><text x="76.6606%" y="127.50"></text></g><g><title>tonic`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (30 samples, 2.04%)</title><rect x="76.6145%" y="133" width="2.0394%" height="15" fill="rgb(227,1,9)" fg:x="1127" fg:w="30"/><text x="76.8645%" y="143.50">t..</text></g><g><title>tonic`&lt;tonic::value::Value as core::cmp::PartialEq&gt;::eq (3 samples, 0.20%)</title><rect x="78.6540%" y="133" width="0.2039%" height="15" fill="rgb(248,47,43)" fg:x="1157" fg:w="3"/><text x="78.9040%" y="143.50"></text></g><g><title>tonic`&lt;tonic::value::Value as core::cmp::PartialOrd&gt;::partial_cmp (16 samples, 1.09%)</title><rect x="78.8579%" y="133" width="1.0877%" height="15" fill="rgb(221,10,30)" fg:x="1160" fg:w="16"/><text x="79.1079%" y="143.50"></text></g><g><title>tonic`DYLD-STUB$$malloc (3 samples, 0.20%)</title><rect x="79.9456%" y="133" width="0.2039%" height="15" fill="rgb(210,229,1)" fg:x="1176" fg:w="3"/><text x="80.1956%" y="143.50"></text></g><g><title>tonic`DYLD-STUB$$memcpy (6 samples, 0.41%)</title><rect x="80.1496%" y="133" width="0.4079%" height="15" fill="rgb(222,148,37)" fg:x="1179" fg:w="6"/><text x="80.3996%" y="143.50"></text></g><g><title>tonic`__rdl_alloc (3 samples, 0.20%)</title><rect x="80.5574%" y="133" width="0.2039%" height="15" fill="rgb(234,67,33)" fg:x="1185" fg:w="3"/><text x="80.8074%" y="143.50"></text></g><g><title>tonic`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (30 samples, 2.04%)</title><rect x="81.1013%" y="117" width="2.0394%" height="15" fill="rgb(247,98,35)" fg:x="1193" fg:w="30"/><text x="81.3513%" y="127.50">t..</text></g><g><title>tonic`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (78 samples, 5.30%)</title><rect x="80.7614%" y="133" width="5.3025%" height="15" fill="rgb(247,138,52)" fg:x="1188" fg:w="78"/><text x="81.0114%" y="143.50">tonic`..</text></g><g><title>tonic`hashbrown::map::make_hash (43 samples, 2.92%)</title><rect x="83.1407%" y="117" width="2.9232%" height="15" fill="rgb(213,79,30)" fg:x="1223" fg:w="43"/><text x="83.3907%" y="127.50">to..</text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.14%)</title><rect x="87.9674%" y="101" width="0.1360%" height="15" fill="rgb(246,177,23)" fg:x="1294" fg:w="2"/><text x="88.2174%" y="111.50"></text></g><g><title>tonic`DYLD-STUB$$memset (1 samples, 0.07%)</title><rect x="88.1033%" y="101" width="0.0680%" height="15" fill="rgb(230,62,27)" fg:x="1296" fg:w="1"/><text x="88.3533%" y="111.50"></text></g><g><title>tonic`__rdl_alloc (2 samples, 0.14%)</title><rect x="88.1713%" y="101" width="0.1360%" height="15" fill="rgb(216,154,8)" fg:x="1297" fg:w="2"/><text x="88.4213%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.07%)</title><rect x="89.5989%" y="53" width="0.0680%" height="15" fill="rgb(244,35,45)" fg:x="1318" fg:w="1"/><text x="89.8489%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (41 samples, 2.79%)</title><rect x="90.6186%" y="37" width="2.7872%" height="15" fill="rgb(251,115,12)" fg:x="1333" fg:w="41"/><text x="90.8686%" y="47.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (87 samples, 5.91%)</title><rect x="89.4630%" y="69" width="5.9143%" height="15" fill="rgb(240,54,50)" fg:x="1316" fg:w="87"/><text x="89.7130%" y="79.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (84 samples, 5.71%)</title><rect x="89.6669%" y="53" width="5.7104%" height="15" fill="rgb(233,84,52)" fg:x="1319" fg:w="84"/><text x="89.9169%" y="63.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (29 samples, 1.97%)</title><rect x="93.4058%" y="37" width="1.9714%" height="15" fill="rgb(207,117,47)" fg:x="1374" fg:w="29"/><text x="93.6558%" y="47.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (93 samples, 6.32%)</title><rect x="89.1910%" y="85" width="6.3222%" height="15" fill="rgb(249,43,39)" fg:x="1312" fg:w="93"/><text x="89.4410%" y="95.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.14%)</title><rect x="95.3773%" y="69" width="0.1360%" height="15" fill="rgb(209,38,44)" fg:x="1403" fg:w="2"/><text x="95.6273%" y="79.50"></text></g><g><title>tonic`hashbrown::raw::RawTable&lt;T,A&gt;::insert (128 samples, 8.70%)</title><rect x="87.0836%" y="117" width="8.7016%" height="15" fill="rgb(236,212,23)" fg:x="1281" fg:w="128"/><text x="87.3336%" y="127.50">tonic`hashbr..</text></g><g><title>tonic`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (110 samples, 7.48%)</title><rect x="88.3073%" y="101" width="7.4779%" height="15" fill="rgb(242,79,21)" fg:x="1299" fg:w="110"/><text x="88.5573%" y="111.50">tonic`hash..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.27%)</title><rect x="95.5133%" y="85" width="0.2719%" height="15" fill="rgb(211,96,35)" fg:x="1405" fg:w="4"/><text x="95.7633%" y="95.50"></text></g><g><title>tonic`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (146 samples, 9.93%)</title><rect x="86.0639%" y="133" width="9.9252%" height="15" fill="rgb(253,215,40)" fg:x="1266" fg:w="146"/><text x="86.3139%" y="143.50">tonic`hashbrow..</text></g><g><title>tonic`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.20%)</title><rect x="95.7852%" y="117" width="0.2039%" height="15" fill="rgb(211,81,21)" fg:x="1409" fg:w="3"/><text x="96.0352%" y="127.50"></text></g><g><title>tonic`hashbrown::map::make_hash (56 samples, 3.81%)</title><rect x="95.9891%" y="133" width="3.8069%" height="15" fill="rgb(208,190,38)" fg:x="1412" fg:w="56"/><text x="96.2391%" y="143.50">toni..</text></g><g><title>libdyld.dylib`start (1,470 samples, 99.93%)</title><rect x="0.0000%" y="245" width="99.9320%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="1470"/><text x="0.2500%" y="255.50">libdyld.dylib`start</text></g><g><title>tonic`main (1,469 samples, 99.86%)</title><rect x="0.0680%" y="229" width="99.8640%" height="15" fill="rgb(237,122,38)" fg:x="1" fg:w="1469"/><text x="0.3180%" y="239.50">tonic`main</text></g><g><title>tonic`std::rt::lang_start_internal (1,469 samples, 99.86%)</title><rect x="0.0680%" y="213" width="99.8640%" height="15" fill="rgb(244,218,35)" fg:x="1" fg:w="1469"/><text x="0.3180%" y="223.50">tonic`std::rt::lang_start_internal</text></g><g><title>tonic`std::rt::lang_start::_{{closure}} (1,469 samples, 99.86%)</title><rect x="0.0680%" y="197" width="99.8640%" height="15" fill="rgb(240,68,47)" fg:x="1" fg:w="1469"/><text x="0.3180%" y="207.50">tonic`std::rt::lang_start::_{{closure}}</text></g><g><title>tonic`std::sys_common::backtrace::__rust_begin_short_backtrace (1,469 samples, 99.86%)</title><rect x="0.0680%" y="181" width="99.8640%" height="15" fill="rgb(210,16,53)" fg:x="1" fg:w="1469"/><text x="0.3180%" y="191.50">tonic`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tonic`tonic::main (1,469 samples, 99.86%)</title><rect x="0.0680%" y="165" width="99.8640%" height="15" fill="rgb(235,124,12)" fg:x="1" fg:w="1469"/><text x="0.3180%" y="175.50">tonic`tonic::main</text></g><g><title>tonic`tonic::vm::VM::run (1,363 samples, 92.66%)</title><rect x="7.2740%" y="149" width="92.6581%" height="15" fill="rgb(224,169,11)" fg:x="107" fg:w="1363"/><text x="7.5240%" y="159.50">tonic`tonic::vm::VM::run</text></g><g><title>tonic`hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.14%)</title><rect x="99.7961%" y="133" width="0.1360%" height="15" fill="rgb(250,166,2)" fg:x="1468" fg:w="2"/><text x="100.0461%" y="143.50"></text></g><g><title>all (1,471 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="1471"/><text x="0.2500%" y="271.50"></text></g><g><title>tonic`main (1 samples, 0.07%)</title><rect x="99.9320%" y="245" width="0.0680%" height="15" fill="rgb(230,116,27)" fg:x="1470" fg:w="1"/><text x="100.1820%" y="255.50"></text></g></svg></svg>