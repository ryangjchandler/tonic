<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="3021"><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.17%)</title><rect x="0.0000%" y="245" width="0.1655%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.33%)</title><rect x="0.1655%" y="245" width="0.3310%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="10"/><text x="0.4155%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.60%)</title><rect x="0.4965%" y="245" width="0.5958%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="18"/><text x="0.7465%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.07%)</title><rect x="1.0924%" y="245" width="0.0662%" height="15" fill="rgb(248,212,6)" fg:x="33" fg:w="2"/><text x="1.3424%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (5 samples, 0.17%)</title><rect x="1.1586%" y="245" width="0.1655%" height="15" fill="rgb(208,68,35)" fg:x="35" fg:w="5"/><text x="1.4086%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (26 samples, 0.86%)</title><rect x="1.3241%" y="245" width="0.8606%" height="15" fill="rgb(232,128,0)" fg:x="40" fg:w="26"/><text x="1.5741%" y="255.50"></text></g><g><title>tonic`&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.36%)</title><rect x="2.1847%" y="245" width="0.3641%" height="15" fill="rgb(207,160,47)" fg:x="66" fg:w="11"/><text x="2.4347%" y="255.50"></text></g><g><title>tonic`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="2.5488%" y="245" width="0.0331%" height="15" fill="rgb(228,23,34)" fg:x="77" fg:w="1"/><text x="2.7988%" y="255.50"></text></g><g><title>tonic`&lt;tonic::value::Value as core::cmp::PartialEq&gt;::eq (3 samples, 0.10%)</title><rect x="2.5819%" y="245" width="0.0993%" height="15" fill="rgb(218,30,26)" fg:x="78" fg:w="3"/><text x="2.8319%" y="255.50"></text></g><g><title>tonic`&lt;tonic::value::Value as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.03%)</title><rect x="2.6812%" y="245" width="0.0331%" height="15" fill="rgb(220,122,19)" fg:x="81" fg:w="1"/><text x="2.9312%" y="255.50"></text></g><g><title>tonic`DYLD-STUB$$free (8 samples, 0.26%)</title><rect x="2.7143%" y="245" width="0.2648%" height="15" fill="rgb(250,228,42)" fg:x="82" fg:w="8"/><text x="2.9643%" y="255.50"></text></g><g><title>tonic`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="2.9791%" y="245" width="0.0331%" height="15" fill="rgb(240,193,28)" fg:x="90" fg:w="1"/><text x="3.2291%" y="255.50"></text></g><g><title>tonic`DYLD-STUB$$memcmp (3 samples, 0.10%)</title><rect x="3.0122%" y="245" width="0.0993%" height="15" fill="rgb(216,20,37)" fg:x="91" fg:w="3"/><text x="3.2622%" y="255.50"></text></g><g><title>tonic`__rdl_alloc (1 samples, 0.03%)</title><rect x="3.1116%" y="245" width="0.0331%" height="15" fill="rgb(206,188,39)" fg:x="94" fg:w="1"/><text x="3.3616%" y="255.50"></text></g><g><title>tonic`__rdl_dealloc (1 samples, 0.03%)</title><rect x="3.1447%" y="245" width="0.0331%" height="15" fill="rgb(217,207,13)" fg:x="95" fg:w="1"/><text x="3.3947%" y="255.50"></text></g><g><title>tonic`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="3.1778%" y="245" width="0.0331%" height="15" fill="rgb(231,73,38)" fg:x="96" fg:w="1"/><text x="3.4278%" y="255.50"></text></g><g><title>tonic`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (18 samples, 0.60%)</title><rect x="3.2109%" y="245" width="0.5958%" height="15" fill="rgb(225,20,46)" fg:x="97" fg:w="18"/><text x="3.4609%" y="255.50"></text></g><g><title>tonic`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="3.8067%" y="245" width="0.0662%" height="15" fill="rgb(210,31,41)" fg:x="115" fg:w="2"/><text x="4.0567%" y="255.50"></text></g><g><title>tonic`std::fs::read_to_string::inner (1 samples, 0.03%)</title><rect x="3.8729%" y="245" width="0.0331%" height="15" fill="rgb(221,200,47)" fg:x="117" fg:w="1"/><text x="4.1229%" y="255.50"></text></g><g><title>tonic`&lt;std::fs::File as std::io::Read&gt;::read_to_string (1 samples, 0.03%)</title><rect x="3.8729%" y="229" width="0.0331%" height="15" fill="rgb(226,26,5)" fg:x="117" fg:w="1"/><text x="4.1229%" y="239.50"></text></g><g><title>tonic`std::io::default_read_to_end (1 samples, 0.03%)</title><rect x="3.8729%" y="213" width="0.0331%" height="15" fill="rgb(249,33,26)" fg:x="117" fg:w="1"/><text x="4.1229%" y="223.50"></text></g><g><title>libdyld.dylib`dyld_stub_binder (1 samples, 0.03%)</title><rect x="3.8729%" y="197" width="0.0331%" height="15" fill="rgb(235,183,28)" fg:x="117" fg:w="1"/><text x="4.1229%" y="207.50"></text></g><g><title>libdyld.dylib`_dyld_fast_stub_entry(void*, long) (1 samples, 0.03%)</title><rect x="3.8729%" y="181" width="0.0331%" height="15" fill="rgb(221,5,38)" fg:x="117" fg:w="1"/><text x="4.1229%" y="191.50"></text></g><g><title>dyld`dyld::fastBindLazySymbol (1 samples, 0.03%)</title><rect x="3.8729%" y="165" width="0.0331%" height="15" fill="rgb(247,18,42)" fg:x="117" fg:w="1"/><text x="4.1229%" y="175.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::doBindFastLazySymbol(unsigned int, ImageLoader::LinkContext const&amp;, void (*)(), void (*) (1 samples, 0.03%)</title><rect x="3.8729%" y="149" width="0.0331%" height="15" fill="rgb(241,131,45)" fg:x="117" fg:w="1"/><text x="4.1229%" y="159.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::resolve (1 samples, 0.03%)</title><rect x="3.8729%" y="133" width="0.0331%" height="15" fill="rgb(249,31,29)" fg:x="117" fg:w="1"/><text x="4.1229%" y="143.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::resolveTwolevel (1 samples, 0.03%)</title><rect x="3.8729%" y="117" width="0.0331%" height="15" fill="rgb(225,111,53)" fg:x="117" fg:w="1"/><text x="4.1229%" y="127.50"></text></g><g><title>dyld`ImageLoader::findExportedSymbolAddress (1 samples, 0.03%)</title><rect x="3.8729%" y="101" width="0.0331%" height="15" fill="rgb(238,160,17)" fg:x="117" fg:w="1"/><text x="4.1229%" y="111.50"></text></g><g><title>dyld`ImageLoaderMachO::findExportedSymbol (1 samples, 0.03%)</title><rect x="3.8729%" y="85" width="0.0331%" height="15" fill="rgb(214,148,48)" fg:x="117" fg:w="1"/><text x="4.1229%" y="95.50"></text></g><g><title>dyld`ImageLoaderMachO::findExportedSymbol (1 samples, 0.03%)</title><rect x="3.8729%" y="69" width="0.0331%" height="15" fill="rgb(232,36,49)" fg:x="117" fg:w="1"/><text x="4.1229%" y="79.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::findShallowExportedSymbol (1 samples, 0.03%)</title><rect x="3.8729%" y="53" width="0.0331%" height="15" fill="rgb(209,103,24)" fg:x="117" fg:w="1"/><text x="4.1229%" y="63.50"></text></g><g><title>dyld`ImageLoader::trieWalk (1 samples, 0.03%)</title><rect x="3.8729%" y="37" width="0.0331%" height="15" fill="rgb(229,88,8)" fg:x="117" fg:w="1"/><text x="4.1229%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="20.3244%" y="197" width="0.0331%" height="15" fill="rgb(213,181,19)" fg:x="614" fg:w="1"/><text x="20.5744%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (10 samples, 0.33%)</title><rect x="20.5561%" y="181" width="0.3310%" height="15" fill="rgb(254,191,54)" fg:x="621" fg:w="10"/><text x="20.8061%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (45 samples, 1.49%)</title><rect x="19.9272%" y="229" width="1.4896%" height="15" fill="rgb(241,83,37)" fg:x="602" fg:w="45"/><text x="20.1772%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (35 samples, 1.16%)</title><rect x="20.2582%" y="213" width="1.1586%" height="15" fill="rgb(233,36,39)" fg:x="612" fg:w="35"/><text x="20.5082%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (32 samples, 1.06%)</title><rect x="20.3575%" y="197" width="1.0593%" height="15" fill="rgb(226,3,54)" fg:x="615" fg:w="32"/><text x="20.6075%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.53%)</title><rect x="20.8871%" y="181" width="0.5296%" height="15" fill="rgb(245,192,40)" fg:x="631" fg:w="16"/><text x="21.1371%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (22 samples, 0.73%)</title><rect x="21.4167%" y="229" width="0.7282%" height="15" fill="rgb(238,167,29)" fg:x="647" fg:w="22"/><text x="21.6667%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.07%)</title><rect x="22.1450%" y="229" width="0.0662%" height="15" fill="rgb(232,182,51)" fg:x="669" fg:w="2"/><text x="22.3950%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (164 samples, 5.43%)</title><rect x="22.2112%" y="229" width="5.4287%" height="15" fill="rgb(231,60,39)" fg:x="671" fg:w="164"/><text x="22.4612%" y="239.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`szone_size (62 samples, 2.05%)</title><rect x="25.5876%" y="213" width="2.0523%" height="15" fill="rgb(208,69,12)" fg:x="773" fg:w="62"/><text x="25.8376%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (54 samples, 1.79%)</title><rect x="25.8524%" y="197" width="1.7875%" height="15" fill="rgb(235,93,37)" fg:x="781" fg:w="54"/><text x="26.1024%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.46%)</title><rect x="31.2810%" y="197" width="0.4634%" height="15" fill="rgb(213,116,39)" fg:x="945" fg:w="14"/><text x="31.5310%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (136 samples, 4.50%)</title><rect x="27.6399%" y="229" width="4.5018%" height="15" fill="rgb(222,207,29)" fg:x="835" fg:w="136"/><text x="27.8899%" y="239.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (66 samples, 2.18%)</title><rect x="29.9570%" y="213" width="2.1847%" height="15" fill="rgb(206,96,30)" fg:x="905" fg:w="66"/><text x="30.2070%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (12 samples, 0.40%)</title><rect x="31.7445%" y="197" width="0.3972%" height="15" fill="rgb(218,138,4)" fg:x="959" fg:w="12"/><text x="31.9945%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.03%)</title><rect x="32.1417%" y="229" width="0.0331%" height="15" fill="rgb(250,191,14)" fg:x="971" fg:w="1"/><text x="32.3917%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (24 samples, 0.79%)</title><rect x="32.1748%" y="229" width="0.7944%" height="15" fill="rgb(239,60,40)" fg:x="972" fg:w="24"/><text x="32.4248%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.33%)</title><rect x="32.9692%" y="229" width="0.3310%" height="15" fill="rgb(206,27,48)" fg:x="996" fg:w="10"/><text x="33.2192%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.13%)</title><rect x="33.3002%" y="229" width="0.1324%" height="15" fill="rgb(225,35,8)" fg:x="1006" fg:w="4"/><text x="33.5502%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.07%)</title><rect x="33.4326%" y="229" width="0.0662%" height="15" fill="rgb(250,213,24)" fg:x="1010" fg:w="2"/><text x="33.6826%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.53%)</title><rect x="33.4988%" y="229" width="0.5296%" height="15" fill="rgb(247,123,22)" fg:x="1012" fg:w="16"/><text x="33.7488%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.13%)</title><rect x="36.5773%" y="181" width="0.1324%" height="15" fill="rgb(231,138,38)" fg:x="1105" fg:w="4"/><text x="36.8273%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.07%)</title><rect x="38.5634%" y="165" width="0.0662%" height="15" fill="rgb(231,145,46)" fg:x="1165" fg:w="2"/><text x="38.8134%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (133 samples, 4.40%)</title><rect x="36.0477%" y="197" width="4.4025%" height="15" fill="rgb(251,118,11)" fg:x="1089" fg:w="133"/><text x="36.2977%" y="207.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (113 samples, 3.74%)</title><rect x="36.7097%" y="181" width="3.7405%" height="15" fill="rgb(217,147,25)" fg:x="1109" fg:w="113"/><text x="36.9597%" y="191.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (55 samples, 1.82%)</title><rect x="38.6296%" y="165" width="1.8206%" height="15" fill="rgb(247,81,37)" fg:x="1167" fg:w="55"/><text x="38.8796%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (23 samples, 0.76%)</title><rect x="39.6888%" y="149" width="0.7613%" height="15" fill="rgb(209,12,38)" fg:x="1199" fg:w="23"/><text x="39.9388%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (186 samples, 6.16%)</title><rect x="34.6243%" y="213" width="6.1569%" height="15" fill="rgb(227,1,9)" fg:x="1046" fg:w="186"/><text x="34.8743%" y="223.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.33%)</title><rect x="40.4502%" y="197" width="0.3310%" height="15" fill="rgb(248,47,43)" fg:x="1222" fg:w="10"/><text x="40.7002%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.33%)</title><rect x="40.7812%" y="213" width="0.3310%" height="15" fill="rgb(221,10,30)" fg:x="1232" fg:w="10"/><text x="41.0312%" y="223.50"></text></g><g><title>tonic`&lt;alloc::string::String as core::clone::Clone&gt;::clone (217 samples, 7.18%)</title><rect x="34.0285%" y="229" width="7.1831%" height="15" fill="rgb(210,229,1)" fg:x="1028" fg:w="217"/><text x="34.2785%" y="239.50">tonic`&lt;all..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.10%)</title><rect x="41.1122%" y="213" width="0.0993%" height="15" fill="rgb(222,148,37)" fg:x="1242" fg:w="3"/><text x="41.3622%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.10%)</title><rect x="46.1106%" y="197" width="0.0993%" height="15" fill="rgb(234,67,33)" fg:x="1393" fg:w="3"/><text x="46.3606%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.23%)</title><rect x="47.6663%" y="149" width="0.2317%" height="15" fill="rgb(247,98,35)" fg:x="1440" fg:w="7"/><text x="47.9163%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="47.8980%" y="149" width="0.0331%" height="15" fill="rgb(247,138,52)" fg:x="1447" fg:w="1"/><text x="48.1480%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (83 samples, 2.75%)</title><rect x="45.2499%" y="213" width="2.7474%" height="15" fill="rgb(213,79,30)" fg:x="1367" fg:w="83"/><text x="45.4999%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (54 samples, 1.79%)</title><rect x="46.2099%" y="197" width="1.7875%" height="15" fill="rgb(246,177,23)" fg:x="1396" fg:w="54"/><text x="46.4599%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (48 samples, 1.59%)</title><rect x="46.4085%" y="181" width="1.5889%" height="15" fill="rgb(230,62,27)" fg:x="1402" fg:w="48"/><text x="46.6585%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (16 samples, 0.53%)</title><rect x="47.4677%" y="165" width="0.5296%" height="15" fill="rgb(216,154,8)" fg:x="1434" fg:w="16"/><text x="47.7177%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.07%)</title><rect x="47.9311%" y="149" width="0.0662%" height="15" fill="rgb(244,35,45)" fg:x="1448" fg:w="2"/><text x="48.1811%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.07%)</title><rect x="47.9974%" y="213" width="0.0662%" height="15" fill="rgb(251,115,12)" fg:x="1450" fg:w="2"/><text x="48.2474%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (36 samples, 1.19%)</title><rect x="48.0636%" y="213" width="1.1917%" height="15" fill="rgb(240,54,50)" fg:x="1452" fg:w="36"/><text x="48.3136%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (12 samples, 0.40%)</title><rect x="52.6316%" y="165" width="0.3972%" height="15" fill="rgb(233,84,52)" fg:x="1590" fg:w="12"/><text x="52.8816%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (185 samples, 6.12%)</title><rect x="51.8371%" y="181" width="6.1238%" height="15" fill="rgb(207,117,47)" fg:x="1566" fg:w="185"/><text x="52.0871%" y="191.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (149 samples, 4.93%)</title><rect x="53.0288%" y="165" width="4.9321%" height="15" fill="rgb(249,43,39)" fg:x="1602" fg:w="149"/><text x="53.2788%" y="175.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (82 samples, 2.71%)</title><rect x="55.2466%" y="149" width="2.7143%" height="15" fill="rgb(209,38,44)" fg:x="1669" fg:w="82"/><text x="55.4966%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (249 samples, 8.24%)</title><rect x="50.1490%" y="197" width="8.2423%" height="15" fill="rgb(236,212,23)" fg:x="1515" fg:w="249"/><text x="50.3990%" y="207.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.43%)</title><rect x="57.9609%" y="181" width="0.4303%" height="15" fill="rgb(242,79,21)" fg:x="1751" fg:w="13"/><text x="58.2109%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.26%)</title><rect x="58.3913%" y="197" width="0.2648%" height="15" fill="rgb(211,96,35)" fg:x="1764" fg:w="8"/><text x="58.6413%" y="207.50"></text></g><g><title>tonic`&lt;alloc::string::String as core::clone::Clone&gt;::clone (293 samples, 9.70%)</title><rect x="49.2552%" y="213" width="9.6988%" height="15" fill="rgb(253,215,40)" fg:x="1488" fg:w="293"/><text x="49.5052%" y="223.50">tonic`&lt;alloc::..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.30%)</title><rect x="58.6561%" y="197" width="0.2979%" height="15" fill="rgb(211,81,21)" fg:x="1772" fg:w="9"/><text x="58.9061%" y="207.50"></text></g><g><title>tonic`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="58.9540%" y="213" width="0.0331%" height="15" fill="rgb(208,190,38)" fg:x="1781" fg:w="1"/><text x="59.2040%" y="223.50"></text></g><g><title>tonic`DYLD-STUB$$memcpy (4 samples, 0.13%)</title><rect x="58.9871%" y="213" width="0.1324%" height="15" fill="rgb(235,213,38)" fg:x="1782" fg:w="4"/><text x="59.2371%" y="223.50"></text></g><g><title>tonic`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (547 samples, 18.11%)</title><rect x="41.2115%" y="229" width="18.1066%" height="15" fill="rgb(237,122,38)" fg:x="1245" fg:w="547"/><text x="41.4615%" y="239.50">tonic`&lt;alloc::vec::Vec&lt;T,A&gt; ..</text></g><g><title>tonic`__rdl_alloc (6 samples, 0.20%)</title><rect x="59.1195%" y="213" width="0.1986%" height="15" fill="rgb(244,218,35)" fg:x="1786" fg:w="6"/><text x="59.3695%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.70%)</title><rect x="59.4505%" y="213" width="0.6951%" height="15" fill="rgb(240,68,47)" fg:x="1796" fg:w="21"/><text x="59.7005%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.17%)</title><rect x="59.9801%" y="197" width="0.1655%" height="15" fill="rgb(210,16,53)" fg:x="1812" fg:w="5"/><text x="60.2301%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.13%)</title><rect x="60.0132%" y="181" width="0.1324%" height="15" fill="rgb(235,124,12)" fg:x="1813" fg:w="4"/><text x="60.2632%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (15 samples, 0.50%)</title><rect x="61.0394%" y="181" width="0.4965%" height="15" fill="rgb(224,169,11)" fg:x="1844" fg:w="15"/><text x="61.2894%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (55 samples, 1.82%)</title><rect x="60.1456%" y="213" width="1.8206%" height="15" fill="rgb(250,166,2)" fg:x="1817" fg:w="55"/><text x="60.3956%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (41 samples, 1.36%)</title><rect x="60.6091%" y="197" width="1.3572%" height="15" fill="rgb(242,216,29)" fg:x="1831" fg:w="41"/><text x="60.8591%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (13 samples, 0.43%)</title><rect x="61.5359%" y="181" width="0.4303%" height="15" fill="rgb(230,116,27)" fg:x="1859" fg:w="13"/><text x="61.7859%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.03%)</title><rect x="61.9662%" y="213" width="0.0331%" height="15" fill="rgb(228,99,48)" fg:x="1872" fg:w="1"/><text x="62.2162%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.07%)</title><rect x="61.9993%" y="213" width="0.0662%" height="15" fill="rgb(253,11,6)" fg:x="1873" fg:w="2"/><text x="62.2493%" y="223.50"></text></g><g><title>tonic`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (84 samples, 2.78%)</title><rect x="59.3181%" y="229" width="2.7805%" height="15" fill="rgb(247,143,39)" fg:x="1792" fg:w="84"/><text x="59.5681%" y="239.50">to..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="62.0655%" y="213" width="0.0331%" height="15" fill="rgb(236,97,10)" fg:x="1875" fg:w="1"/><text x="62.3155%" y="223.50"></text></g><g><title>tonic`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (33 samples, 1.09%)</title><rect x="62.0986%" y="229" width="1.0924%" height="15" fill="rgb(233,208,19)" fg:x="1876" fg:w="33"/><text x="62.3486%" y="239.50"></text></g><g><title>tonic`&lt;tonic::value::Value as core::cmp::PartialEq&gt;::eq (2 samples, 0.07%)</title><rect x="63.1910%" y="229" width="0.0662%" height="15" fill="rgb(216,164,2)" fg:x="1909" fg:w="2"/><text x="63.4410%" y="239.50"></text></g><g><title>tonic`&lt;tonic::value::Value as core::cmp::PartialOrd&gt;::partial_cmp (24 samples, 0.79%)</title><rect x="63.2572%" y="229" width="0.7944%" height="15" fill="rgb(220,129,5)" fg:x="1911" fg:w="24"/><text x="63.5072%" y="239.50"></text></g><g><title>tonic`DYLD-STUB$$free (7 samples, 0.23%)</title><rect x="64.0516%" y="229" width="0.2317%" height="15" fill="rgb(242,17,10)" fg:x="1935" fg:w="7"/><text x="64.3016%" y="239.50"></text></g><g><title>tonic`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="64.2833%" y="229" width="0.0331%" height="15" fill="rgb(242,107,0)" fg:x="1942" fg:w="1"/><text x="64.5333%" y="239.50"></text></g><g><title>tonic`DYLD-STUB$$memcmp (4 samples, 0.13%)</title><rect x="64.3165%" y="229" width="0.1324%" height="15" fill="rgb(251,28,31)" fg:x="1943" fg:w="4"/><text x="64.5665%" y="239.50"></text></g><g><title>tonic`DYLD-STUB$$memcpy (3 samples, 0.10%)</title><rect x="64.4489%" y="229" width="0.0993%" height="15" fill="rgb(233,223,10)" fg:x="1947" fg:w="3"/><text x="64.6989%" y="239.50"></text></g><g><title>tonic`__rdl_alloc (4 samples, 0.13%)</title><rect x="64.5482%" y="229" width="0.1324%" height="15" fill="rgb(215,21,27)" fg:x="1950" fg:w="4"/><text x="64.7982%" y="239.50"></text></g><g><title>tonic`__rdl_alloc (2 samples, 0.07%)</title><rect x="64.9454%" y="213" width="0.0662%" height="15" fill="rgb(232,23,21)" fg:x="1962" fg:w="2"/><text x="65.1954%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.07%)</title><rect x="65.7067%" y="165" width="0.0662%" height="15" fill="rgb(244,5,23)" fg:x="1985" fg:w="2"/><text x="65.9567%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (16 samples, 0.53%)</title><rect x="66.3025%" y="149" width="0.5296%" height="15" fill="rgb(226,81,46)" fg:x="2003" fg:w="16"/><text x="66.5525%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (46 samples, 1.52%)</title><rect x="65.5412%" y="181" width="1.5227%" height="15" fill="rgb(247,70,30)" fg:x="1980" fg:w="46"/><text x="65.7912%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (39 samples, 1.29%)</title><rect x="65.7729%" y="165" width="1.2910%" height="15" fill="rgb(212,68,19)" fg:x="1987" fg:w="39"/><text x="66.0229%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.23%)</title><rect x="66.8322%" y="149" width="0.2317%" height="15" fill="rgb(240,187,13)" fg:x="2019" fg:w="7"/><text x="67.0822%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (59 samples, 1.95%)</title><rect x="65.1440%" y="197" width="1.9530%" height="15" fill="rgb(223,113,26)" fg:x="1968" fg:w="59"/><text x="65.3940%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="67.0639%" y="181" width="0.0331%" height="15" fill="rgb(206,192,2)" fg:x="2026" fg:w="1"/><text x="67.3139%" y="191.50"></text></g><g><title>tonic`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (76 samples, 2.52%)</title><rect x="64.6806%" y="229" width="2.5157%" height="15" fill="rgb(241,108,4)" fg:x="1954" fg:w="76"/><text x="64.9306%" y="239.50">to..</text></g><g><title>tonic`alloc::raw_vec::finish_grow (66 samples, 2.18%)</title><rect x="65.0116%" y="213" width="2.1847%" height="15" fill="rgb(247,173,49)" fg:x="1964" fg:w="66"/><text x="65.2616%" y="223.50">t..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.10%)</title><rect x="67.0970%" y="197" width="0.0993%" height="15" fill="rgb(224,114,35)" fg:x="2027" fg:w="3"/><text x="67.3470%" y="207.50"></text></g><g><title>tonic`alloc::raw_vec::finish_grow (2 samples, 0.07%)</title><rect x="67.1963%" y="229" width="0.0662%" height="15" fill="rgb(245,159,27)" fg:x="2030" fg:w="2"/><text x="67.4463%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_size (4 samples, 0.13%)</title><rect x="73.3201%" y="197" width="0.1324%" height="15" fill="rgb(245,172,44)" fg:x="2215" fg:w="4"/><text x="73.5701%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (178 samples, 5.89%)</title><rect x="69.3810%" y="213" width="5.8921%" height="15" fill="rgb(236,23,11)" fg:x="2096" fg:w="178"/><text x="69.6310%" y="223.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`szone_size (55 samples, 1.82%)</title><rect x="73.4525%" y="197" width="1.8206%" height="15" fill="rgb(205,117,38)" fg:x="2219" fg:w="55"/><text x="73.7025%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (38 samples, 1.26%)</title><rect x="74.0152%" y="181" width="1.2579%" height="15" fill="rgb(237,72,25)" fg:x="2236" fg:w="38"/><text x="74.2652%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (9 samples, 0.30%)</title><rect x="76.4316%" y="197" width="0.2979%" height="15" fill="rgb(244,70,9)" fg:x="2309" fg:w="9"/><text x="76.6816%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (4 samples, 0.13%)</title><rect x="76.7296%" y="197" width="0.1324%" height="15" fill="rgb(217,125,39)" fg:x="2318" fg:w="4"/><text x="76.9796%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (59 samples, 1.95%)</title><rect x="75.2731%" y="213" width="1.9530%" height="15" fill="rgb(235,36,10)" fg:x="2274" fg:w="59"/><text x="75.5231%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (11 samples, 0.36%)</title><rect x="76.8620%" y="197" width="0.3641%" height="15" fill="rgb(251,123,47)" fg:x="2322" fg:w="11"/><text x="77.1120%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (86 samples, 2.85%)</title><rect x="84.2105%" y="181" width="2.8467%" height="15" fill="rgb(221,13,13)" fg:x="2544" fg:w="86"/><text x="84.4605%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`free_tiny (384 samples, 12.71%)</title><rect x="77.2261%" y="213" width="12.7110%" height="15" fill="rgb(238,131,9)" fg:x="2333" fg:w="384"/><text x="77.4761%" y="223.50">libsystem_malloc.dy..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (300 samples, 9.93%)</title><rect x="80.0066%" y="197" width="9.9305%" height="15" fill="rgb(211,50,8)" fg:x="2417" fg:w="300"/><text x="80.2566%" y="207.50">libsystem_mall..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (87 samples, 2.88%)</title><rect x="87.0573%" y="181" width="2.8798%" height="15" fill="rgb(245,182,24)" fg:x="2630" fg:w="87"/><text x="87.3073%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (18 samples, 0.60%)</title><rect x="89.9371%" y="213" width="0.5958%" height="15" fill="rgb(242,14,37)" fg:x="2717" fg:w="18"/><text x="90.1871%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.33%)</title><rect x="90.5329%" y="213" width="0.3310%" height="15" fill="rgb(246,228,12)" fg:x="2735" fg:w="10"/><text x="90.7829%" y="223.50"></text></g><g><title>tonic`core::ptr::drop_in_place&lt;tonic::vm::Frame&gt; (723 samples, 23.93%)</title><rect x="67.2625%" y="229" width="23.9325%" height="15" fill="rgb(213,55,15)" fg:x="2032" fg:w="723"/><text x="67.5125%" y="239.50">tonic`core::ptr::drop_in_place&lt;tonic::..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.33%)</title><rect x="90.8640%" y="213" width="0.3310%" height="15" fill="rgb(209,9,3)" fg:x="2745" fg:w="10"/><text x="91.1140%" y="223.50"></text></g><g><title>tonic`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (47 samples, 1.56%)</title><rect x="91.4598%" y="213" width="1.5558%" height="15" fill="rgb(230,59,30)" fg:x="2763" fg:w="47"/><text x="91.7098%" y="223.50"></text></g><g><title>tonic`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (96 samples, 3.18%)</title><rect x="91.1950%" y="229" width="3.1778%" height="15" fill="rgb(209,121,21)" fg:x="2755" fg:w="96"/><text x="91.4450%" y="239.50">ton..</text></g><g><title>tonic`hashbrown::map::make_hash (41 samples, 1.36%)</title><rect x="93.0156%" y="213" width="1.3572%" height="15" fill="rgb(220,109,13)" fg:x="2810" fg:w="41"/><text x="93.2656%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.13%)</title><rect x="95.0679%" y="197" width="0.1324%" height="15" fill="rgb(232,18,1)" fg:x="2872" fg:w="4"/><text x="95.3179%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (34 samples, 1.13%)</title><rect x="96.2264%" y="133" width="1.1255%" height="15" fill="rgb(215,41,42)" fg:x="2907" fg:w="34"/><text x="96.4764%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (77 samples, 2.55%)</title><rect x="95.7299%" y="165" width="2.5488%" height="15" fill="rgb(224,123,36)" fg:x="2892" fg:w="77"/><text x="95.9799%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (74 samples, 2.45%)</title><rect x="95.8292%" y="149" width="2.4495%" height="15" fill="rgb(240,125,3)" fg:x="2895" fg:w="74"/><text x="96.0792%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (28 samples, 0.93%)</title><rect x="97.3519%" y="133" width="0.9268%" height="15" fill="rgb(205,98,50)" fg:x="2941" fg:w="28"/><text x="97.6019%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (86 samples, 2.85%)</title><rect x="95.4982%" y="181" width="2.8467%" height="15" fill="rgb(205,185,37)" fg:x="2885" fg:w="86"/><text x="95.7482%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.07%)</title><rect x="98.2787%" y="165" width="0.0662%" height="15" fill="rgb(238,207,15)" fg:x="2969" fg:w="2"/><text x="98.5287%" y="175.50"></text></g><g><title>tonic`hashbrown::raw::RawTable&lt;T,A&gt;::insert (106 samples, 3.51%)</title><rect x="94.8692%" y="213" width="3.5088%" height="15" fill="rgb(213,199,42)" fg:x="2866" fg:w="106"/><text x="95.1192%" y="223.50">ton..</text></g><g><title>tonic`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (96 samples, 3.18%)</title><rect x="95.2003%" y="197" width="3.1778%" height="15" fill="rgb(235,201,11)" fg:x="2876" fg:w="96"/><text x="95.4503%" y="207.50">ton..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="98.3449%" y="181" width="0.0331%" height="15" fill="rgb(207,46,11)" fg:x="2971" fg:w="1"/><text x="98.5949%" y="191.50"></text></g><g><title>tonic`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (122 samples, 4.04%)</title><rect x="94.3727%" y="229" width="4.0384%" height="15" fill="rgb(241,35,35)" fg:x="2851" fg:w="122"/><text x="94.6227%" y="239.50">toni..</text></g><g><title>tonic`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="98.3780%" y="213" width="0.0331%" height="15" fill="rgb(243,32,47)" fg:x="2972" fg:w="1"/><text x="98.6280%" y="223.50"></text></g><g><title>all (3,021 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(247,202,23)" fg:x="0" fg:w="3021"/><text x="0.2500%" y="367.50"></text></g><g><title>libdyld.dylib`start (3,021 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(219,102,11)" fg:x="0" fg:w="3021"/><text x="0.2500%" y="351.50">libdyld.dylib`start</text></g><g><title>tonic`main (3,021 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(243,110,44)" fg:x="0" fg:w="3021"/><text x="0.2500%" y="335.50">tonic`main</text></g><g><title>tonic`std::rt::lang_start_internal (3,021 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="3021"/><text x="0.2500%" y="319.50">tonic`std::rt::lang_start_internal</text></g><g><title>tonic`std::rt::lang_start::_{{closure}} (3,021 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(216,99,12)" fg:x="0" fg:w="3021"/><text x="0.2500%" y="303.50">tonic`std::rt::lang_start::_{{closure}}</text></g><g><title>tonic`std::sys_common::backtrace::__rust_begin_short_backtrace (3,021 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(226,22,26)" fg:x="0" fg:w="3021"/><text x="0.2500%" y="287.50">tonic`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tonic`tonic::main (3,021 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="3021"/><text x="0.2500%" y="271.50">tonic`tonic::main</text></g><g><title>tonic`tonic::vm::VM::run (2,903 samples, 96.09%)</title><rect x="3.9060%" y="245" width="96.0940%" height="15" fill="rgb(213,25,53)" fg:x="118" fg:w="2903"/><text x="4.1560%" y="255.50">tonic`tonic::vm::VM::run</text></g><g><title>tonic`hashbrown::map::make_hash (48 samples, 1.59%)</title><rect x="98.4111%" y="229" width="1.5889%" height="15" fill="rgb(252,105,26)" fg:x="2973" fg:w="48"/><text x="98.6611%" y="239.50"></text></g></svg></svg>